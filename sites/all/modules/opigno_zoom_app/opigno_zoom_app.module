<?php
/**
 * @file
 * Opigno Zoom app module file
 *
 * @author James Aparicio
 */
 include_once 'ZoomAPI.class.php';

function opigno_zoom_app_permission() {
  return array(
    'configure Zoom' => array(
      'title' => t('Configure Zoom'),
      'description' => t('Allows the user to configure Zoom account'),
    ),
    'register meeting attendance' => array(
      'title' => t('Register meeting attendance'),
      'description' => t('Register user meeting attendance'),
    ),
  );
}

function opigno_zoom_app_og_permission() {
  return array(
    'start meetings' => array(
      'title' => t('Start meetings'),
      'description' => t('Allows the user to start Zoom meetings'),
    ),
    'attend meetings' => array(
      'title' => t('Attend meetings'),
      'description' => t('Allows the user to attend meetings'),
    ),
    'register meeting attendance' => array(
      'title' => t('Register meeting attendance'),
      'description' => t('Register user meeting attendance'),
    ),
  );
}

/**
 * Implements hook_opigno_breadcrumbs().
 */
function opigno_zoom_app_opigno_breadcrumbs( $gid) {
  $breadcrumbs = array();

  $node = menu_get_object();
  // Must we handle this page request for the breadcrumb ?
  if ((isset($node->type) && $node->type == 'zoom_video_conference') ||
    current_path() == 'node/add/zoom-video-conference') {

    // Add the Zoom list link.
    $breadcrumbs[] = l(t("Meetings"), "node/$gid/Zoom");
  }

  if (!empty($breadcrumbs)) {
    return $breadcrumbs;
  }
}

function opigno_zoom_app_opigno_tool($node = NULL) {
  return array(
    'meetings' => array(
      'name' => t("Meetings (Web conferencing)"),
      'path' => isset($node) ? "node/{$node->nid}/Zoom" : '',
      'description' => t("Allows students to attend meetings and teachers to create meetings"),
      'actions' => array(
        'create_meeting' => array(
          'title' => t("Create meeting"),
          'href' => 'node/add/zoom-video-conference',
          'access_arguments' => array('node', isset($node) ? $node->nid : 0, 'create meeting content'),
          'access_callback' => 'og_user_access',
          'query' => array(
            'og_group_ref' => isset($node) ? $node->nid : '',
          )
        ),
      ),
    ),
  );
}

function opigno_zoom_app_menu() {
  return array(
    'Zoom' => array(
      'title' => "Meettings",
      'description' => "Displays Scheduled meetings",
      'page callback' => 'opigno_get_my_meetings',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
    'node/%/Zoom' => array(
      'title' => 'Meetings',
      'description' => "Displays Scheduled meetings",
      'page callback' => 'opigno_get_course_meetings',
      'access callback' => 'og_user_access',
      'access arguments' => array('node',1, 'attend meetings'),
      'page arguments' => array(1),
      'type' => MENU_CALLBACK,
    ),
    'admin/opigno/system/Zoom' => array(
      'title' => 'Zoom configuration',
      'description' => 'The configuration for the Zoom integration',
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'opigno_zoom_app_Zoom_edit_form',
      ),
      'access arguments' => array(
        'configure Zoom',
      ),
    ),
    'node/%node/Zoom_attendance' => array(
    'title' => 'Score in the meeting',
    'description' => 'Score in the meeting',
    'page callback' => 'opigno_zoom_attendance_page',
    'page arguments' => array(1),
    'access callback' => "opigno_zoom_app_access_attendance",
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  )
  );
}

function opigno_zoom_app_access_attendance($node, $account = NULL) {
  if (!($node->type=="zoom_video_conference"))
  {
    return false;
  }
  if (!isset($account)) {
    global $user;
    $account = clone $user;
  }
  if (module_exists('og_context')) {
    $group = og_context('node');
    if (!empty($group)) {
      return og_user_access('node', $group['gid'], 'register meeting attendance', $account);
    }
    else {
      return user_access('register meeting attendance', $account);
    }
  }
}

////////////// Scoring page ////////////////////////
function opigno_zoom_attendance_page($node) {
  return drupal_get_form('opigno_zoom_attendance_form', $node);
}

function opigno_zoom_attendance_form($form, &$form_state,$node) {
  $form['submit_attendance'] = array(
    '#type' => 'fieldset',
    '#title' => $form_state['build_info']['args'][0]->title,
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#prefix' => '<table><thead><tr><th>' . t("Student name") . '</th><th>' . t("Attendance") . '</th><th>' . t("Score") . '</th></tr></thead><tbody>',
    '#suffix' => '</tbody></table>',
  );
  $group = og_context('node');
  if (!empty($group['gid'])) {
    $memberships = opigno_zoom_app_get_users_membership($group['gid']);
    $nextlink="";
    $next=false;
    $lessons=opigno_zoom_app_get_all_Zoom_unrestricted($group['gid']);
    if (isset($lessons[$group['gid']]))
    {
      foreach($lessons[$group['gid']] as $Zoom_id => $Zoom)
      {
        if ($next==true)
        {
          $nextlink="node/".$Zoom_id."/score";
          break;
        }
        if ($Zoom_id==$node->nid)
        {
          $next=true;
        }
      }
    }
    foreach ($memberships as $m_id => $membership_id) {
      $og_membership = og_membership_load($membership_id);
      $user_roles_in_group = og_get_user_roles($og_membership->group_type, $og_membership->gid, $og_membership->etid);
      $non_student_roles = array('manager', 'teacher', 'coach');
      if (count(array_intersect($user_roles_in_group, $non_student_roles)) == 0) {
      $user = user_load($og_membership->etid);
      $defaults = opigno_zoom_attendance_form_get_default_value($form_state['build_info']['args'][0]->nid, $user->uid);
      $form['submit_attendance']['name_' . $user->uid] = array(
        '#type' => 'item',
        '#title' => $user->name,
        '#prefix' => '<tr><td>',
        '#suffix' => '</td>',
      );
      $form['submit_attendance']['status_' . $user->uid] = array(
        '#type' => 'select',
        '#options' => array(
          0 => t('Absent'),
          1 => t('Attended'),
        ),
        '#default_value' => $defaults['status'],
        '#prefix' => '<td>',
        '#suffix' => '</td>',
      );
      $form['submit_attendance']['score_' . $user->uid] = array(
        '#type' => 'textfield',
        '#size' => '10',
        '#required' => FALSE,
        '#default_value' => $defaults['score'],
        '#prefix' => '<td>',
        '#suffix' => '</td></tr>',
      );
      }
    }
  }
  $form['submit_scores']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Score attendance'),
    '#submit' => array('opigno_zoom_attendance_form_submit'),
    '#prefix' => '<div class="form-submits">',
  );

  if (($next==true)&&!empty($nextlink))
  {
    $form['store'] = array(
      '#type' => 'value',
      '#value' => $nextlink,
    );

    $form['submit_1'] = array(
      '#type' => 'submit',
      '#value' => t('Score and go to next'),
      '#submit' => array('opigno_zoom_attendance_form_submit_1'),
      '#suffix' => '</div>',
    );
  }
  else
  {
    $form['submit']['#suffix'] = '</div>';

  }
  return $form;
}

function opigno_zoom_attendance_form_validate($form, &$form_state)
{
  foreach($form_state['values'] as $index => $element)
  {
    if (opigno_zoom_startsWith($index,'score_'))
    {
      if ((!is_numeric($element['#value']))||($element['#value']<0)||($element['#value']>100))
      {
        form_set_error($index, t('Score must be integer (0-100)'));
      }
    }
  }
}

function opigno_zoom_attendance_form_submit($form, &$form_state) {
  foreach ($form_state['values'] as $index => $element) {
    if (opigno_zoom_startsWith($index, 'status_')) {
      $uid = explode("status_", $index);
      $uid = $uid[1];
      opigno_zoom_attendance_form_set_value($form_state['build_info']['args'][0]->nid, $uid, $element, $form_state['values']['score_' . $uid]);
      opigno_zoom_app_int_finished($form_state['build_info']['args'][0]->nid,$element,$form_state['values']['status_' . $uid],$uid);
    }
  }
}

function opigno_zoom_attendance_form_submit_1($form, &$form_state) {
  foreach ($form_state['values'] as $index => $element) {
    if (opigno_zoom_startsWith($index, 'status_')) {
      $uid = explode("status_", $index);
      $uid = $uid[1];
      opigno_zoom_attendance_form_set_value($form_state['build_info']['args'][0]->nid, $uid, $element, $form_state['values']['score_' . $uid]);
      opigno_zoom_app_int_finished($form_state['build_info']['args'][0]->nid,$element,$form_state['values']['status_' . $uid],$uid);
    }
  }
  drupal_goto($form_state['values']['store']);
}

function opigno_zoom_app_int_finished($Zoomid, $score,$status, $taker = NULL)
{
  if (module_exists('rules')) {
    $taker=user_load($taker);
    $Zoom=node_load($Zoomid);
    $author = user_load($Zoom->uid);
    if ((int)$status==1)
    {
      foreach($Zoom->og_group_ref[LANGUAGE_NONE] as $index => $value)
      {
        if (opigno_quiz_app_user_passed($value['target_id'],$taker->uid))
        {
          rules_invoke_event('opigno_quiz_app_rules_quiz_passed', $taker, $author, $Zoom);
          drupal_get_messages();
        }
      }
    }
  }
}

function opigno_zoom_attendance_form_set_value($Zoom_id, $uid, $status,$score) {
  db_merge('opigno_zoom_attendance')
    ->key(array('Zoom_id' => $Zoom_id, 'uid' => $uid))
    ->fields(array(
      'Zoom_id' => $Zoom_id,
      'status' => $status,
      'score' =>$score,
      'uid' => $uid,
    ))
    ->execute();
}

function opigno_zoom_attendance_form_get_default_value($Zoom_id, $uid) {
  $result = db_query('SELECT owa.status,owa.score FROM {opigno_zoom_attendance} owa WHERE owa.Zoom_id = :Zoom_id and owa.uid = :uid', array(
    ':Zoom_id' => $Zoom_id,
    ':uid' => $uid
  ));
  $result_['status'] = '';
  foreach ($result as $record) {
    $result_['status'] = $record->status;
    $result_['score'] = $record->score;
  }
  return $result_;
}

function opigno_zoom_startsWith($haystack, $needle, $case = TRUE) {
  if ($case) {
    return (strcmp(substr($haystack, 0, strlen($needle)), $needle) === 0);
  }
  return (strcasecmp(substr($haystack, 0, strlen($needle)), $needle) === 0);
}
/////////////////////////////////////////////////


function opigno_get_my_meetings() {
  Global $user;
  $today = date('Y-m-d 00:00:00');
  $my_groups = og_get_groups_by_user($user);
  $meetings = node_load_multiple(array(), array('type' => "zoom_video_conference"));
  if (isset($my_groups['node'])) {
    foreach ($my_groups['node'] as $anid) {
      $vars[$anid] = array();
      foreach ($meetings as $meetingnid => $meeting) {
        $lookfor['target_id'] = $anid;
        if ($meeting->opigno_calendar_date[LANGUAGE_NONE][0]['value'] > $today) {
          foreach ($meeting->og_group_ref[LANGUAGE_NONE] as $aref) {
            if ($aref == $lookfor) {
              $vars[$anid][$meetingnid] = $meetingnid;
            }
          }
        }
      }
    }
  }
  return theme_opigno_zoom_app_meetings($vars);
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function opigno_zoom_app_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if ($root_path == 'node/%/Zoom') {
    $gid = arg(1);
    if (og_user_access('node',$gid,'create zoom_video_conference content')) {
      $item = menu_get_item('node/add/zoom-video-conference');
      $item['title'] = t("Create meeting");
      $item['options']['query']['og_group_ref'] = $item['localized_options']['query']['og_group_ref'] = $gid;
      $item['options']['attributes']['class'][] = $item['localized_options']['attributes']['class'][] = 'opigno-Zoom-meeting-add';
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
* @author milton: change to Zoom: start_url, join_url are stored
*/
function opigno_get_course_meetings($nodeid) {
  $node = node_load($nodeid);
  $today = date('Y-m-d 00:00:00');

  $header = array(t("@nodetitle meetings", array('@nodetitle' => $node->title)), "", "");
  $rows = array();
  $meetings = opigno_zoom_app_get_all_Zoom($nodeid);

  foreach ($meetings[$nodeid] as $meetingnid => $meeting) {
    $meeting_node = node_load($meetingnid);
    if (format_date(strtotime($meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['value'] . ' ' . $meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['timezone_db']), 'medium', "Y-m-d H:i:s") > $today) {
      //milton: if can start meetings, start meeting
      //else join meeting within 10 minutes
      if (og_user_access('node', $node->nid, 'start meetings')){
          $message = l(t("Start meeting"), $meeting_node->field_start_url[LANGUAGE_NONE][0]['value'], array('attributes' => array('target' => '_blank')));
      //if within 10 minutes before meeting starts,meeting is started
    }elseif(strtotime($meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['value'] . ' ' . $meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['timezone_db'] - 600) < time()){
      $message = l(t("Join meeting"), $meeting_node->field_join_url[LANGUAGE_NONE][0]['value'], array('attributes' => array('target' => '_blank')));
    }else{
      $check = TRUE;
      $message = t("Meeting has not started (please stand by)");
    }
    //end
      /**
      if (opigno_zoom_meeting_has_started(opigno_zoom_app_get_meeting_link($meetingnid)) == TRUE) {
        $message = l(t("Join Meeting"), opigno_zoom_app_get_meeting_link($meetingnid), array('attributes' => array('target' => '_blank')));
      }
      elseif (og_user_access('node', $node->nid, 'start meetings')) {
        foreach ($meeting_node->meeting_id as $lang => $value) {
          $meeting_id = $value[0]['value'];
        }

        $backurl = urlencode(variable_get('opigno_zoom_app_Zoom_full_url') . '/m.php?AT=HM&MK=' . $meeting_id);
        $message = l(t("Start meeting"), variable_get('opigno_zoom_app_Zoom_full_url') . "/p.php?AT=LI&WID=" . variable_get('opigno_zoom_app_Zoom_user') . "&PW=" . variable_get('opigno_zoom_app_Zoom_password') . "&MU=" . $backurl, array('attributes' => array('target' => '_blank')));
      }
      else {
        $check = TRUE;
        $message = t("Meeting has not started (please stand by)");
      }
      */

      if ($check == TRUE) {
        $class = "opigno-Zoom-app-nolink";
      }
      else {
        $class = "take-button-cell";
      }
      $path_edit = 'node/' . $meeting_node->nid . '/edit';
      $link_edit = menu_get_item($path_edit);
      if (!empty($link_edit) && $link_edit['access']) {
        $message .= l(t("Edit"), $path_edit, array('attributes' => array('class' => 'edit action-element action-edit-element')));
      }
      $score_path = 'node/' . $meeting_node->nid . '/Zoom_attendance';
      $link_score = menu_get_item($score_path);
      if (!empty($link_score) && $link_score['access']) {
        $message .= l(t("Results"), $score_path, array('attributes' => array('class' => 'results action-element action-results-element')));
      }
      $time = strtotime($meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['value']);
      $time2 = strtotime($meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['value2']);
      $diff = abs($time2 - $time);
      $rows[] = array(
        'data' => array(
          $meeting_node->title,
          $time,
          gmdate('H\h i\m', $diff),
          array('data' => $message, 'class' => $class),
        ),
      );
    }
  }
  //add Zoomes of course, if class
  //by milton
  $ret = theme('table', array('header' => $header, 'rows' => $rows));
  if($node->type=='class'){
  	if (isset($node->opigno_class_courses[LANGUAGE_NONE])) {
  		foreach ($node->opigno_class_courses[LANGUAGE_NONE] as $cindex => $course) {
  			$ret .= opigno_get_course_meetings($course['target_id']);
  		}
  	}
  }
  return $ret;
  //added end

  //return theme('table', array('header' => $header, 'rows' => $rows));

}

/**
 * milton: need to rewrite for zoom: start_ur, join_url
 */

function opigno_zoom_app_node_view($node, $view_mode, $langcode) {
  if (($node->type == "zoom_video_conference") && ($view_mode == 'full')) {
    foreach($node->meeting_id as $lang => $value)
    {
      $meeting_id=$value[0]['value'];
    }
    //milton:change to zoom: start_url,join_url
    //$backurl = urlencode(variable_get('opigno_zoom_app_Zoom_full_url') . '/m.php?AT=HM&MK=' . $meeting_id);
    if (og_user_access('node', $node->og_group_ref[LANGUAGE_NONE][0]['target_id'], 'start meetings'))
    {
      /*
      $node->content['start_meeting'] = array(
        '#markup' => l(t("Start meeting"), variable_get('opigno_zoom_app_Zoom_full_url') . "/p.php?AT=LI&WID=".variable_get('opigno_zoom_app_Zoom_user')."&PW=".variable_get('opigno_zoom_app_Zoom_password')."&MU=" . $backurl, array('attributes' => array('target' => '_blank'))),
        '#weight' => 10,
      );
      */
      $node->content['start_meeting'] = array(
        '#markup' => l(t("Start meeting"), $node->field_start_url[LANGUAGE_NONE][0]['value'], array('attributes' => array('target' => '_blank'))),
        '#weight' => 10,
      );
    }
    //milton: within 10 minutes before class start, join it
    elseif(strtotime($node->opigno_calendar_date[LANGUAGE_NONE][0]['value'] . ' ' . $node->opigno_calendar_date[LANGUAGE_NONE][0]['timezone_db'] - 600) < time())
    {
      $node->content['start_meeting']=array(
        '#markup' => l(t("Join Meeting"), $node->field_join_url[LANGUAGE_NONE][0]['value'], array('attributes' => array('target' => '_blank'))),
        '#weight' => 10,
      );
    }
    else
    {
      $node->content['start_meeting']=array(
        '#markup' => t("Meeting has not started (please stand by)"),
        '#weight' => 10,
      );
    }

  }

}
/**
milton: comment for zoom.

function opigno_zoom_app_get_meeting_link($nid) {
  Global $user;
  $node = node_load($nid);
  foreach($node->meeting_id as $lang => $value)
  {
    $meeting_id=$value[0]['value'];
  }
  foreach($node->meeting_password as $lang => $value)
  {
    $meeting_password=$value[0]['value'];
  }
  return variable_get('opigno_zoom_app_Zoom_full_url') . '/m.php?AT=JM&MK=' . $meeting_id . '&AN=' . $user->name . '&AE=' . $user->mail . '&PW=' . $meeting_password; //.'&BU=http://localhost/opignov3';
}
*/
function theme_opigno_zoom_app_meetings($vars) {
  $header = array(
    array(
      'data' => t("My Scheduled meetings"),
    )
  );
  $rows = array();
  foreach ($vars as $nid => $var) {
    $va_[$nid] = $var;
    $rows[] = array('data' => array(theme_opigno_zoom_app_meeting($va_)));
    $va_ = NULL;
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}
/**
 * milton: change for zoom: start_url, join_url
 */
function theme_opigno_zoom_app_meeting($vars) {
  $node = node_load(key($vars));
  $header = array(
    array(
      'data' => $node->title,
    )
  );
  $rows = array();

  foreach ($vars[$node->nid] as $meetingnid => $meeting_nid) {
    $meeting_node = node_load($meeting_nid);
    //milton: comment for zoom: start_url, join_url
    /**
    if (opigno_zoom_meeting_has_started(opigno_zoom_app_get_meeting_link($meeting_nid)) == TRUE) {
      $message = l(t("Join Meeting"), opigno_zoom_app_get_meeting_link($meeting_nid), array('attributes' => array('target' => '_blank')));
    }
    elseif (og_user_access('node', $node->nid, 'start meetings')) {
      foreach($meeting_node->meeting_id as $lang => $value)
      {
        $meeting_id=$value[0]['value'];
      }
      $backurl = urlencode(variable_get('opigno_zoom_app_Zoom_full_url') . '/m.php?AT=HM&MK=' . $meeting_id);
      $message = l(t("Start meeting"), variable_get('opigno_zoom_app_Zoom_full_url') . "/p.php?AT=LI&WID=".variable_get('opigno_zoom_app_Zoom_user')."&PW=".variable_get('opigno_zoom_app_Zoom_password')."&MU=" . $backurl, array('attributes' => array('target' => '_blank')));
    }
    else {
      $message = t("Meeting has not started (please stand by)");
    }
    */
    if (og_user_access('node', $node->og_group_ref[LANGUAGE_NONE][0]['target_id'], 'start meetings'))
    {
      $message = l(t("Start Meeting"), $meeting_node->field_start_url[LANGUAGE_NONE][0]['value'], array('attributes' => array('target' => '_blank')));
    }
    elseif(strtotime($meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['value'] . ' ' . $meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['timezone_db'] - 600) < time())
    {
      $message = l(t("Join Meeting"), $meeting_node->field_join_url[LANGUAGE_NONE][0]['value'], array('attributes' => array('target' => '_blank')));
    }
    else
    {
      $message = t("Meeting has not started (please stand by)");
    }
    //end

    $rows[] = array(
      'data' => array(
        $meeting_node->title,
        $meeting_node->opigno_calendar_date[LANGUAGE_NONE][0]['value'],
        $message,
      )
    );
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}
//milton: comment for Zoom
/*
function opigno_zoom_meeting_has_started($url) {
  if (!function_exists('curl_init')) {
    die('Sorry cURL is not installed!');
  }
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_USERAGENT, "MozillaXYZ/1.0");
  curl_setopt($ch, CURLOPT_HEADER, 1);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10);
  $output = curl_exec($ch);
  curl_close($ch);
  if (strpos($output, 'FAIL') !== FALSE) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}
*/

function opigno_zoom_app_form_alter(&$form, &$form_state, $form_id) {
  if (($form_id == "zoom_video_conference_node_form") && ((strpos($form['#action'], 'add') !== FALSE) || (strpos($form['#action'], 'edit') !== FALSE))) {
    $form['meeting_id']['#type'] = 'hidden';
    //$form['field_meeting_type']['#default_value'] = 2;
    $form['field_meeting_type']['#type'] = 'hidden';

    $form['og_group_ref']['#type'] = 'hidden';
    $form['field_start_url']['#type'] = 'hidden';
    $form['field_join_url']['#type'] = 'hidden';
    $form['field_host_id']['#type'] = 'hidden';

    //$form['#validate'][] = 'opigno_zoom_app_meeting_form_validation';
    if (strpos($form['#action'], 'edit') !== FALSE)
    {
      $form['meeting_password']['#type'] = 'hidden';
    }
  }

  if (($form['#form_id'] == 'zoom_video_conference_node_form') && (isset($form['#node_edit_form']) && ($form['#node_edit_form'])))
  {
    // Is insert
    if (is_null($form['nid']['#value'])) {
      $form['opigno_calendar_date']['#access'] = FALSE;
      array_unshift($form['#submit'],'opigno_zoom_app_recursive_submit');
    }
    // Is edit
    else {
      $form['meeting_dates']['#access'] = FALSE;
    }
  }
}


function opigno_zoom_app_recursive_submit($form, &$form_state) {
  /*
  $field=field_info_field("meeting_dates");
  $unixdate = strtotime($form_state['values']['meeting_dates'][LANGUAGE_NONE][0]['value'].' '.date_get_timezone_db($field['settings']['tz_handling']));
  $form_state['values']['title']=$form_state['values']['title']." ".format_date($unixdate,'custom','d-m-Y H:i',$form_state['values']['meeting_dates'][LANGUAGE_NONE][0]['timezone']);
  */
  $form_state['values']['opigno_calendar_date'][LANGUAGE_NONE][0]=$form_state['values']['meeting_dates'][LANGUAGE_NONE][0];
}


function opigno_zoom_app_node_insert($node) {
  drupal_set_message('in opigno_zoom_app_node_insert');

  if ($node->type == "zoom_video_conference") {

    foreach ($node->meeting_dates[LANGUAGE_NONE] as $index => $date) {
      if ($index != 0) {
        $new_node = $node;
        unset($new_node->nid);
        unset($new_node->vid);
        unset($new_node->meeting_dates);
        /*
        $title=explode(" ",$node->title);
        array_pop($title);
        array_pop($title);
        $title=implode(" ",$title);
        */
        $unixdate = strtotime($date['value'].' '.$date['timezone_db']);
        //change to user's time
        //$new_node->title = $title." ".format_date($unixdate,'custom','d-m-Y H:i',$date['timezone_db']);
        //$new_node->title = $title;
        $new_node->opigno_calendar_date[LANGUAGE_NONE][0] = $date;
        //Meeting start time in ISO datetime format. For scheduled meeting only. Should be UTC time, such as 2012-11-25T12:00:00Z.
        //Meeting duration (minutes). For scheduled meeting only.
        $meeting = new ZoomAPI();

        $time = strtotime($new_node->opigno_calendar_date[LANGUAGE_NONE][0]['value']);
        $time2 = strtotime($new_node->opigno_calendar_date[LANGUAGE_NONE][0]['value2']);
        $diff = abs($time2 - $time);

        //milton: change to Zoom data format,
        $data = array();
        //gmdate change to UTC time.
        $data['start_time'] = gmdate("Y-m-d\TH:i:s\Z",$unixdate);

        $data['duration'] = $diff/60;
        $data['topic'] = $new_node->title;
        $data['type'] = isset($form_state['values']['field_meeting_type'][LANGUAGE_NONE][0]) ? $form_state['values']['field_meeting_type'][LANGUAGE_NONE][0] : 2;
        $data['password'] = $new_node->meeting_password[LANGUAGE_NONE][0] ;

        $meetingRes = $meeting->sendRequest('meeting/create', $data);

        //milton: add other new fields
        $new_node->meeting_id[LANGUAGE_NONE][0]['value']=$meetingRes->id;
        $new_node->host_id[LANGUAGE_NONE][0]['value']=$meetingRes->host_id;
        $new_node->field_start_url[LANGUAGE_NONE][0]['value']=$meetingRes->start_url;
        $new_node->field_join_url[LANGUAGE_NONE][0]['value']=$meetingRes->join_url;

        node_save($new_node);
      }
      else
      {
        node_access_acquire_grants($node);
      }
    }
  }
}

function opigno_zoom_app_meeting_form_validation($form, &$form_state) {
  drupal_set_message('in opigno_zoom_app_meeting_form_validation');

  if ($form_state['clicked_button']['#value'] != 'Delete') {
    //module_load_include('php', 'opigno_zoom_app', 'ZoomAPI.class');
    if (strpos($form['#action'], 'add') !== FALSE) {
      $isnew = TRUE;
      $node = new stdClass();
      $node->title = $form_state['values']['title'];

      $node->opigno_calendar_date[LANGUAGE_NONE][0] = $form_state['values']['meeting_dates'][LANGUAGE_NONE][0];
      $form_state['values']['opigno_calendar_date'][LANGUAGE_NONE][0]=$form_state['values']['meeting_dates'][LANGUAGE_NONE][0];
    }

    if (strpos($form['#action'], 'edit') !== FALSE) {
      $isnew = FALSE;
      $node = node_load($form['nid']['#value']);
    }

    $meeting = new ZoomAPI();
    //milton: change
    //$meetingkey = $meeting->getmeetingZoom($node, $isnew);
    //milton: change to Zoom data format
    $data = array();
    $unixdate = strtotime($node->opigno_calendar_date[LANGUAGE_NONE][0]['value'].' '.$node->opigno_calendar_date[LANGUAGE_NONE][0]['timezone_db']);

    $data['start_time'] = gmdate("Y-m-d\TH:i:s\Z",  $unixdate );

    $data['duration'] = (strtotime($node->opigno_calendar_date[LANGUAGE_NONE][0]['value2']) -  strtotime($node->opigno_calendar_date[LANGUAGE_NONE][0]['value'] )) /60;
    $data['topic'] = $node->title;
    $data['type']  = 2;
    //$data['type'] = isset($form_state['values']['field_meeting_type'][LANGUAGE_NONE][0])? $form_state['values']['field_meeting_type'][LANGUAGE_NONE][0] : 2;

    $data['password'] = $new_node->meeting_password[LANGUAGE_NONE][0] ;

    drupal_set_message('data type is '.$data['type']);
    drupal_set_message($data);
    print(' <br> \n -------------11111111----- <br> \n');
    print_r($data);
    $meetingRes = $meeting->sendRequest('meeting/create', $data);
    drupal_set_message(print_r($meetingRes));
    print(' <br> \n -------------11111111----- <br> \n');
    print_r($meetingRes);
        print(' <br> \n --------2222222222---------- <br> \n');
    drupal_set_message('afer validation ');
    print('id is  '.$meetingRes->id);
    if (!isset($meetingRes->id) ) {
      form_set_error('NULL', t('Could not create/edit meeting, Zoom service down or configuration incorrect'));
    }

  }

}
/**
*milton: no use any more


function opigno_zoom_app_Zoom_edit_form($form, &$form_state) {

  $Zoom_info = new stdClass();
  $Zoom_info->Zoom_user = variable_get('opigno_zoom_app_Zoom_user');
  $Zoom_info->Zoom_password = variable_get('opigno_zoom_app_Zoom_password');
  $Zoom_info->Zoom_sid = variable_get('opigno_zoom_app_Zoom_sid');
  $Zoom_info->Zoom_pid = variable_get('opigno_zoom_app_Zoom_pid');
  $all = variable_get('opigno_zoom_app_Zoom_url');
  $explode1 = explode('://', $all);
  if (isset($explode1[1]))
  {
    $explode2 = explode('.Zoom', $explode1[1]);
    $Zoom_info->Zoom_url = $explode2[0];
  }
  $form['Zoom_user'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Username'),
    '#required' => TRUE,
    '#default_value' => !empty($Zoom_info->Zoom_user) ? $Zoom_info->Zoom_user : '',
  );
  $form['Zoom_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Zoom Password'),
    '#required' => TRUE,
    '#default_value' => !empty($Zoom_info->Zoom_password) ? $Zoom_info->Zoom_password : '',
  );
  $form['Zoom_sid'] = array(
    '#type' => 'textfield',
    '#title' => t('Site ID (SID)'),
    '#required' => TRUE,
    '#default_value' => !empty($Zoom_info->Zoom_sid) ? $Zoom_info->Zoom_sid : '',
  );
  $form['Zoom_pid'] = array(
    '#type' => 'textfield',
    '#title' => t('Partner ID (PID)'),
    '#required' => TRUE,
    '#default_value' => !empty($Zoom_info->Zoom_pid) ? $Zoom_info->Zoom_pid : '',
  );
  $form['Zoom_url'] = array(
    '#type' => 'textfield',
    '#description' => t('Please enter the subdomain prefix. Ex: For http://subdomainprefix.Zoom.com use subdomainprefix'),
    '#title' => t('Subdomain prefix'),
    '#required' => TRUE,
    '#default_value' => !empty($Zoom_info->Zoom_url) ? $Zoom_info->Zoom_url : '',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['#validate'][] = 'opigno_zoom_app_Zoom_edit_form_validation';
  return $form;
}

function opigno_zoom_app_Zoom_edit_form_validation($form, &$form_state) {
  $errors = form_get_errors();
  if (empty($errors)) {

    if (opigno_zoom_app_authenticate($form_state)) {
      drupal_set_message(t('Configuration is valid and was saved'), 'status');

      variable_set('opigno_zoom_app_Zoom_user', $form_state['values']['Zoom_user']);
      variable_set('opigno_zoom_app_Zoom_password', $form_state['values']['Zoom_password']);
      variable_set('opigno_zoom_app_Zoom_sid', $form_state['values']['Zoom_sid']);
      variable_set('opigno_zoom_app_Zoom_pid', $form_state['values']['Zoom_pid']);
      variable_set('opigno_zoom_app_Zoom_url', 'https://' . $form_state['values']['Zoom_url'] . '.Zoom.com');
      variable_set('opigno_zoom_app_Zoom_full_url', 'https://' . $form_state['values']['Zoom_url'] . '.Zoom.com/' . $form_state['values']['Zoom_url']);

  	}
    else {
      form_set_error('NULL', t('Configuration incorrect or Zoom not reachable'));
    }

  }
}


function opigno_zoom_app_authenticate($form_state) {

  $Zoom_post = new stdClass();
  $Zoom_post->UID = $form_state['values']['Zoom_user'];
  $Zoom_post->PWD = $form_state['values']['Zoom_password'];
  $Zoom_post->SID = $form_state['values']['Zoom_sid'];
  $Zoom_post->PID = $form_state['values']['Zoom_pid'];
  $Zoom_post->URL = 'https://' . $form_state['values']['Zoom_url'] . '.Zoom.com/';
  $Zoom_post->XML = '<?xml version="1.0" ?>
    <serv:message xmlns:serv="http://www.Zoom.com/schemas/2002/06/service" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <header>
<securityContext>
<ZoomID>' . $Zoom_post->UID . '</ZoomID>
<password>' . $Zoom_post->PWD . '</password>
<siteID>' . $Zoom_post->SID . '</siteID>
<partnerID>' . $Zoom_post->PID . '</partnerID>
</securityContext>
      </header>
      <body><bodyContent xmlns:meet="http://www.Zoom.com/schemas/2002/06/service/meeting"
        xsi:type="java:com.Zoom.service.binding.meeting.LstsummaryMeeting">
        </bodyContent>
      </body>
    </serv:message>';

  $post_data = $Zoom_post;
  $post_url = $Zoom_post->URL . '/WBXService/XMLService';
  $post_string = '';
  foreach ($post_data as $data_key => $data_value) {
    $post_string .= '' . $data_key . '=' . urlencode($data_value) . '&';
  }
  $post_string = substr($post_string, 0, -1);
  $ch = curl_init();
  // Set the url, number of POST vars, POST data.
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_URL, $post_url);
  curl_setopt($ch, CURLOPT_POST, count($post_data));
  curl_setopt($ch, CURLOPT_POSTFIELDS, $post_string);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $response = curl_exec($ch);
  $Zoom_error_msg = 'ERROR:<br/><b>RESPONSE:</b><span>' . strip_tags($response) . '</span><br/>
        <br/>
        <b>POSTED DATA:</b><span>' . $post_data->XML . '</span>';
  curl_close($ch);
  if (!empty($response)) {
    $xml_obj = new SimpleXMLElement($response);
    $success = $xml_obj->children('serv', TRUE)->header->response->result;
    $reason = $xml_obj->children('serv', TRUE)->header->response->result;
    if ((string) $success === "SUCCESS") {
      return TRUE;
    }
    else
    {
      $exception = $xml_obj->children('serv', TRUE)->header->response->exceptionID;
      if ((string) $exception==="000015")
      {
        return true;
      }
    }
  }
  return FALSE;
}

*/


//////////////////// Group interface /////////////////////

/////////////////////////////////////////// Group interface ////////////////////////////////////////////////////
/**
 * Implements hook_preprocess_page().
 */
function opigno_zoom_app_preprocess_page(&$vars) {
  drupal_set_message('in  opigno_zoom_app_preprocess_page');
  $group = og_context('node');
  if (!empty($group['gid'])) {
    $node = node_load($group['gid']);
    //modified by milton
    //list Zoom under class, not only under course

    if ($node->type == "course") {
      $vars['group_state']['course'][$node->nid]['Zoom'] = opigno_zoom_app_group_status($group['gid']);
    }
    if ($node->type == "class") {
      if (isset($node->opigno_class_courses[LANGUAGE_NONE])) {
        foreach ($node->opigno_class_courses[LANGUAGE_NONE] as $cindex => $course) {
          $vars['group_state']['course'][$course['target_id']]['Zoom'] = opigno_zoom_app_group_status($course['target_id']);
        }
      }
    }

  }
  print_r($vars['group_state']['course']);
}

function opigno_zoom_app_group_status($node_id) {
  $allZoom = opigno_zoom_app_get_all_Zoom($node_id);
  Global $user;
  return theme_opigno_zoom_app_course_lessons($allZoom,$user);
}

function opigno_zoom_app_get_all_Zoom($node_id) {
  $nodes = array();
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'vid'))
    ->condition('n.status', 1, '=')
    ->condition('n.type', 'zoom_video_conference', '=');
  $query->join('og_membership', 'og_m', 'og_m.etid = n.nid'); //JOIN node with users
  $query->fields('og_m', array('gid'))
    ->condition('og_m.gid', $node_id, '=')
    ->condition('og_m.field_name', 'og_group_ref', '=')
    ->condition('og_m.state', 1, '=')
    ->condition('og_m.entity_type', 'node', '=');
  $query->join('field_data_opigno_calendar_date', 'fdcd', 'fdcd.entity_id = n.nid'); //JOIN node with users
  $query->fields('fdcd')
    ->condition('fdcd.deleted', 0, '=')
    ->condition('fdcd.bundle', 'zoom_video_conference', '=');
    //milton: for start_url, join_url,meeting_password
  $query->join('field_data_field_start_url', 'surl', 'surl.entity_id = n.nid'); //JOIN node with users
  $query->fields('surl',array('field_start_url_value'))
      ->condition('surl.deleted', 0, '=')
      ->condition('surl.bundle', 'zoom_video_conference', '=');

  $query->join('field_data_field_join_url', 'jurl', 'jurl.entity_id = n.nid'); //JOIN node with users
  $query->fields('jurl',array('field_join_url_value'))
        ->condition('jurl.deleted', 0, '=')
        ->condition('jurl.bundle', 'zoom_video_conference', '=');

  $query->join('field_data_meeting_password', 'mpass', 'mpass.entity_id = n.nid'); //JOIN node with users
  $query->fields('mpass',array('meeting_password_value'))
          ->condition('mpass.deleted', 0, '=')
          ->condition('mpass.bundle', 'zoom_video_conference', '=');

  $query->orderBy('fdcd.opigno_calendar_date_value', 'ASC');
  $query->orderBy('n.nid', 'ASC');
  $result = $query->execute();
  $total = 0;
  while ($record = $result->fetchAssoc()) {
    if ($router_item = menu_get_item('node/' . $record['nid'])) {
      if ($router_item['access']) {
        $nodes[$node_id][$record['nid']] = $record['nid'];
      }
    }
  }
  return $nodes;
}

/**
 * Theme callback: display course quizes and results.
 */
function theme_opigno_zoom_app_course_lessons($vars,$user) {
  $rows = array();
  if (!empty($vars)) {
    foreach ($vars as $course_id => $ihlessons) {
      foreach ($ihlessons as $ihlesson_id => $ihlesson) {
        $ihlesson=node_load($ihlesson);
        $time = strtotime($ihlesson->opigno_calendar_date[LANGUAGE_NONE][0]['value']);
        $time2 = strtotime($ihlesson->opigno_calendar_date[LANGUAGE_NONE][0]['value2']);
        $diff = abs($time2 - $time);
        $defaults=opigno_zoom_attendance_form_get_default_value($ihlesson_id,$user->uid);
        $defaults['status']=='0' ? $status=t('Absent') : ($defaults['status']=='1' ? $status=t('Attended') : $status='-');
        $selected="";
        if (strpos(current_path(),'node/'.$ihlesson->nid) !== false) {
          $selected="selected";
        }
        $rows[] = array(
          'class' => array(),
          'data' => array(
            l($ihlesson->title.'('.$ihlesson->opigno_calendar_date[LANGUAGE_NONE][0]['value'].')', 'node/' . $course_id."/Zoom",array('attributes' => array('class' => array($selected)))),
            gmdate('H\h i\m', $diff),
            $status,
          )
        );
      }
    }
  }
  $header = array(
    array(
      'data' => t('Zoom meetings'),
      'class' => array('opigno-Zoom-app-course-name')
    ),
    array(
      'data' => t('Duration'),
      'class' => array('opigno-Zoom-app-course-duration')
    ),
    array(
      'data' => t('Status'),
      'class' => array('opigno-Zoom-app-course-status')
    ),
  );
  if (!empty($rows))
  {
  return theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('class' => array())));
  }
}


/**
 * Implements hook_views_query_alter().
 */
function opigno_zoom_app_views_query_alter(&$view, &$query) {
  global $user;
  if (($view->name == 'opigno_quizzes') && ($view->current_display == 'entityreference_1')) {
    foreach ($query->where as &$conditions) {
      if (is_array($conditions)) {
        foreach ($conditions['conditions'] as &$condition) {
          if (is_string($condition['field'])&&($condition['field']=='node.type')) {
           $condition['value'][count($condition['value'])] = 'zoom_video_conference';
          }
        }
      }
    }
  }
}


function opigno_zoom_app_get_all_required_quizzes($node) {
  $quizzes = &drupal_static(__FUNCTION__);

  if (!isset($quizzes[$node->nid])) {
    $quizzes[$node->nid] = array();
    if (isset($node->course_required_quiz_ref[LANGUAGE_NONE])) {
      foreach ($node->course_required_quiz_ref[LANGUAGE_NONE] as $item) {
        $nody=node_load($item['target_id']);
        if ($nody->type=="zoom_video_conference")
        {
          $nody=node_load($item['target_id']);
          $quizzes[$node->nid][$item['target_id']] = node_load($item['target_id']);
        }
      }
    }
  }

  return $quizzes[$node->nid];
}


function opigno_zoom_app_get_all_Zoom_unrestricted($node_id) {
  $nodes = array();
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'title', 'vid'))
    ->condition('n.status', 1, '=')
    ->condition('n.type', 'zoom_video_conference', '=');
  $query->join('og_membership', 'og_m', 'og_m.etid = n.nid'); //JOIN node with users
  $query->fields('og_m', array('gid'))
    ->condition('og_m.gid', $node_id, '=')
    ->condition('og_m.field_name', 'og_group_ref', '=')
    ->condition('og_m.state', 1, '=')
    ->condition('og_m.entity_type', 'node', '=');
  $query->join('field_data_opigno_calendar_date', 'fdcd', 'fdcd.entity_id = n.nid'); //JOIN node with users
  $query->fields('fdcd')
    ->condition('fdcd.deleted', 0, '=')
    ->condition('fdcd.bundle', 'zoom_video_conference', '=');
  $query->orderBy('fdcd.opigno_calendar_date_value', 'ASC');
  $query->orderBy('n.nid', 'ASC');
  $result = $query->execute();
  $total = 0;
  while ($record = $result->fetchAssoc()) {
        $nodes[$node_id][$record['nid']] = $record['nid'];
      }
  return $nodes;
}

function opigno_zoom_app_get_all_Zoom_unrestricted_view($node_id)
{
  $html="";
  $nodes=opigno_zoom_app_get_all_Zoom_unrestricted($node_id);
  foreach($nodes[$node_id] as $index => $node)
  {
    $node=node_load($node);
    $html.='<div class="Zoom-dates">';
    $html.='<div class="Zoom-title">';
    $html.=$node->title;
    $html.="</div>";
    $html.="</div>";
  }
  return $html;
}

/**
 * get all membership from group, copied from in_house_training
 * @author milton
 */

function opigno_zoom_app_get_users_membership($gid) {
	$query = db_select('og_membership', 'og_m');
	$query->condition('entity_type', "user", '=')
	->condition('gid', $gid, '=')
	->fields('og_m');
	$result = $query->execute();
	$memberships = array();
	while ($record = $result->fetchAssoc()) {
		$memberships[$record['id']] = $record['id'];
	}
	return $memberships;
}
