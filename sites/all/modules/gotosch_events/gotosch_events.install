<?php

/**
 * Set default events roles upon enable
 */
function gotosch_events_enable() {
  $revert = array(
    'gotosch_events' => array('og_features_permission'),
  );
  features_revert($revert);

  $groups = og_get_all_group();

  foreach ($groups AS $gid) {
    gotosch_groups_features_permission_rebuild('gotosch_events', $gid);
  }
}

/**
 * Implements hook_install().
 * Creates a default datetime format for events.
 */
 /*
function gotosch_events_install() {
  db_insert('date_formats')
    ->fields(array(
      'format' => 'M d Y, g:ia T',
      'type' => 'event_datetime',
      'locked' => 1,
    ))
    ->execute();

  db_insert('date_format_type')
    ->fields(array(
      'type' => 'event_datetime',
      'title' => 'Event Datetime',
      'locked' => 0,
    ))
    ->execute();

  variable_set('date_format_event_datetime', 'M d Y, g:ia T');
}
*/

function gotosch_groups_features_permission_rebuild($module, $gid) {
  module_load_include('features.inc', 'og', '/includes/og_features_role');

  if ($defaults = features_get_default('og_features_permission', $module)) {
    // Make sure the list of available group types is up to date, especially
    // when installing multiple features at once, for example from an install
    // profile or via drush.
    drupal_static_reset();

    $grant = array();
    $revoke = array();

    foreach ($defaults as $key => $details) {
      list($group_type, $bundle, $perm) = explode(':', $key);

      // Make sure the role exists for this entity.
      foreach ($details['roles'] as $role) {
        $bundle_role = _og_features_role_exists($role, $group_type, $bundle);
        if (empty($bundle_role)) {
          og_role_save(og_role_create($role, $group_type, $gid, $bundle));
        }
      }

      $roles = og_roles($group_type, $bundle, $gid);
      foreach ($roles as $rid => $rolename) {
        if (in_array($rolename, $details['roles'])) {
          $grant[$rid][] = $perm;
        }
        else {
          $revoke[$rid][] = $perm;
        }
      }
    }

    if (!empty($grant)) {
      foreach ($grant as $rid => $permissions) {
        og_role_grant_permissions($rid, $permissions);
      }
    }

    if (!empty($revoke)) {
      foreach ($revoke as $rid => $permissions) {
        og_role_revoke_permissions($rid, $permissions);
      }
    }
  }
}
