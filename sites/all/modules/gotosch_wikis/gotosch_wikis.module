<?php
/**
 * @file
 * Code for the gotosch Wikis feature.
 */

include_once 'gotosch_wikis.features.inc';

/**
* Implements hook_module_implements_alter().
*/
/*
function gotosch_wikis_module_implements_alter(&$implementations, $hook) {
  // We need to override access control for revision view callbacks
  // in order to give all users permission to view wiki node revisions.
  if ($hook == 'menu_alter') {
    $group = $implementations['gotosch_wikis'];
    unset($implementations['gotosch_wikis']);
    $implementations['gotosch_wikis'] = $group;
  }
}
*/
/**
 * Implements hook_menu_alter().
 */
/*
function gotosch_wikis_menu_alter(&$items) {
  // Alter the two node menu revision items and change the
  // access callback to our custom one.
  $items['node/%node/revisions']['access arguments'][] = $items['node/%node/revisions']['access callback'];
  $items['node/%node/revisions']['access callback'] = 'gotosch_wikis_user_revision_access';

  $items['node/%node/revisions/%/view']['access arguments'][] = $items['node/%node/revisions/%/view']['access callback'];
  $items['node/%node/revisions/%/view']['access callback'] = 'gotosch_wikis_user_revision_access';
}
*/
/**
 * Custom access callback for viewing revision info.
 */
/*
function gotosch_wikis_user_revision_access($node = NULL, $old_callback = '_node_revision_access') {
  // Only use custom revision access for wikis. Access to other content types
  // should be handled by the standard callback.
  if ($node->type == 'wiki') {
    // The content was posted to specific groups.
    if (isset($node->og_group_ref[LANGUAGE_NONE][0]['target_id'])) {
      return og_user_access('node', $node->og_group_ref[LANGUAGE_NONE][0]['target_id'], 'update any wiki content');
    }
    // The content was posted privately to all trusted contacts.
    elseif (isset($node->og_user_group_ref[LANGUAGE_NONE][0]['target_id'])) {
      return og_user_access('user', $node->og_user_group_ref[LANGUAGE_NONE][0]['target_id'], 'update any wiki content');
    }
  }
  return $old_callback($node, 'view');
}
*/


/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function gotosch_wikis_form_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];

  list(, , $bundle) = entity_extract_ids('node', $node);

  if ($bundle == 'wiki' && empty($node->nid)) {
    drupal_set_title(t('Create a wiki'));
  }
}

/**
 * Implements hook_form_FROM_ID_alter().
 */
function gotosch_wikis_form_gotosch_bw_partial_node_form_alter(&$form, &$form_state) {
  if (empty($form['#entity']) || $form['#entity']->type != 'wiki') {
    return;
  }

  $form['title']['#markup'] = t('Create a wiki');
  $form['actions']['submit']['#value'] = t('Create');
  //$form['#pre_render'][] = 'gotosch_wikis_form_gotosch_bw_partial_node_form_after_build';
}



/**
 * Implements hook_node_update().
 */
/*
function gotosch_wikis_node_update($node) {
  if ($node->type == 'wiki' && module_exists('message')) {
    global $user;
    //gotosch_groups_first_contribution($user, $node);
    //$message = message_create('gotosch_wikis_wiki_updated', array('uid' => $user->uid, 'timestamp' => REQUEST_TIME));
    //$wrapper = entity_metadata_wrapper('message', $message);
    // Save reference to the node in the node reference field.
    // We use a multiple value field in case we wish to use the same
    // field for grouping messages in the future
    // (eg http://drupal.org/node/1757060).
    $wrapper->field_target_nodes[] = $node;
    $wrapper->save();
  }
}
*/
/**
 * Implements hook_views_pre_render().
 */
function gotosch_wikis_views_pre_render(&$view) {
  // Improve the browsing widget empty text when displayed outside of a group.
  // TODO: Enable og_context and check group context instead of looking for an
  // empty first argument.
  if (empty($view->args[0]) && $view->name == 'gotosch_bw_wikis') {
    $view->display_handler->handlers['empty']['area']->options['content'] = t('No wikis have been created.');
  }
}
